from aiogram import types, Dispatcher
from create_bot import bot, db, CHAT_ID, ADMIN_ID
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup


class FSMRefusalAd(StatesGroup):
    photo = State()
    product_name = State()
    specifications = State()
    prise = State()
    contact = State()


async def sends_to_admin(callback_query: types.CallbackQuery):
    inline_command = callback_query.data.split(':')
    ad = db.exists_product(inline_command[1])[0]
    await callback_query.answer(text='üöÜ–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É',
                                show_alert=True)
    await callback_query.message.delete()
    await bot.send_photo(ADMIN_ID, photo=ad[4], caption=f"<b>{ad[5].strip().upper()}</b>\n{ad[6]}\n<b>{ad[7]}</b>\n"
                                                        f"<i>{ad[8]}</i>", parse_mode='HTML',
                         reply_markup=InlineKeyboardMarkup().add(
                             InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"add_ad:{ad[0]}"),
                             InlineKeyboardButton("–û—Ç–∫–∞–∑", callback_data=f"refusal:{ad[0]}")))


async def refusal_ad(callback_query: types.CallbackQuery):
    inline_command = callback_query.data.split(':')
    await callback_query.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("–Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"not publ:{inline_command[1]}:0"),
            InlineKeyboardButton("–Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"not publ:{inline_command[1]}:1"),
            InlineKeyboardButton("–Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞", callback_data=f"not publ:{inline_command[1]}:2"),
            InlineKeyboardButton("–Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç", callback_data=f"not publ:{inline_command[1]}:3"),
            InlineKeyboardButton("—Ä–µ–∫–ª–∞–º–∞", callback_data=f"not publ:{inline_command[1]}:4"),
            InlineKeyboardButton("–ù–µ –ø—É–±–ª–∏–∫—É–µ–º", callback_data=f"not publ:{inline_command[1]}:5")))


async def sends_to_chat(callback_query: types.CallbackQuery):

    inline_command = callback_query.data.split(':')
    ad = db.exists_product(inline_command[1])[0]
    await bot.send_message(ad[1], text=f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad[5]} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')
    x = await bot.send_photo(CHAT_ID, photo=ad[4], caption=f"<b>{ad[5].strip().upper()}</b>\n{ad[6]}\n<b>{ad[7]}</b>\n"
                                                           f"<i>{ad[8]}</i>", parse_mode='HTML')
    db.update_value(x["message_id"], ad[0])
    await callback_query.message.delete()

async  def not_publ(callback_query: types.CallbackQuery):
    reason_for_failure = ('–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ', '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞',
                          '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–†–∞—Å—Ü–µ–Ω–µ–Ω–æ –∫–∞–∫ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ\n'
                                                                 '–î–ª—è –µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n'
                                                                 '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è 50 —Ä—É–±.\n'
                                                                 '–†–∞–∑–º–µ—Å—Ç–∏—Ç—å+–∑–∞–∫—Ä–µ–ø–∏—Ç—å –Ω–∞ 3 —Å—É—Ç–æ–∫ - 100 —Ä—É–±',
                          '–ü–æ–¥–æ–±–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è')
    inline_command = callback_query.data.split(':')
    ad = db.exists_product(inline_command[1])[0]
    await bot.send_message(ad[1], text=f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad[5]} –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞:\n'
                                       f'{reason_for_failure[int(inline_command[2])]}')
    db.del_ad_bd(ad[0])
    await callback_query.message.delete()


def register_handler_admin(dp: Dispatcher):
    dp.register_callback_query_handler(sends_to_admin, lambda x: x.data.startswith('sends_to_admin'))
    dp.register_callback_query_handler(refusal_ad, lambda x: x.data.startswith('refusal'))
    dp.register_callback_query_handler(not_publ, lambda x: x.data.startswith('not publ'))
    dp.register_callback_query_handler(sends_to_chat, lambda x: x.data.startswith('add_ad'))
