from create_bot import bot, db, CHAT_ID_BL, CHAT_ID_BEL, ADMIN_ID
from aiogram import types
from aiogram.utils.exceptions import MessageCantBeDeleted, MessageToDeleteNotFound

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import Dispatcher
from keyboards.kb_users import keyword
import time


async def command_start(message: types.Message):
    await bot.send_photo(message.from_user.id, photo=InputFile('data/logo1.png'),
                         caption=f'<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n'
                                 f'–Ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª–µ\n'
                                 f'<b> <a href="https://t.me/+zd5Iew3RoQg2ZGJi">–û–±—ä—è–≤–ª–µ–Ω–∏—è –ë–µ–ª–æ–≥–æ—Ä—Å–∫</a></b>\n'
                                 f'<b>–•–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É</b>\n'
                                 f'<i>üìå–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µüìå –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</i>\n'
                                 f'<b>–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b>\n'
                                 f'üìç–õ–∏—á–Ω—ã–µ –Ω–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n'
                                 f'üìç–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n'
                                 f'üìç–í —Ä–∞–∑–¥–µ–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è\n'
                                 f'üìç–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–∞—á–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.\n'
                                 f'üìç–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ\n<i>–° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫\n'
                                 f'<a href="https://t.me/mixalych06">–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a></i>',
                         parse_mode='HTML', reply_markup=keyword)
    # db.add_user(message.from_user.id)


async def command_help(message: types.Message):
    await bot.send_photo(message.from_user.id, photo=InputFile('data/logo1.png'),
                         caption=f'<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n'
                                 f'–Ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª–µ\n'
                                 f'<b> <a href="https://t.me/+zd5Iew3RoQg2ZGJi">–û–±—ä—è–≤–ª–µ–Ω–∏—è –ë–µ–ª–æ–≥–æ—Ä—Å–∫</a></b>\n'
                                 f'<b>–•–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É</b>\n'
                                 f'<i>üìå–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µüìå –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</i>\n'
                                 f'<b>–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b>\n'
                                 f'üìç–õ–∏—á–Ω—ã–µ –Ω–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n'
                                 f'üìç–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n'
                                 f'üìç–í —Ä–∞–∑–¥–µ–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è\n'
                                 f'üìç–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–∞—á–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.\n'
                                 f'üìç–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ\n<i>–° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫\n'
                                 f'<a href="https://t.me/mixalych06">–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a></i>',
                         parse_mode='HTML', reply_markup=keyword)


class FSMAddAd(StatesGroup):
    city = State()
    photo = State()
    product_name = State()
    specifications = State()
    prise = State()
    contact = State()


async def add_start(message: types.Message):
    number_of_entries = db.number_of_entries_user_products(message.from_user.id)
    if number_of_entries >= 5 and message.from_user.id != ADMIN_ID:
        await message.answer(
            f'üöÜ–Ø –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç–∏ –±–æ–ª—å—à–µ 5-—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É M–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–∏—Ç–µ –Ω–µ –Ω—É–∂–Ω–æ–µ.\n'
            f'–ù–æ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª–µ')
        return
    else:
        await FSMAddAd.city.set()
        await message.reply('üöÜ–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.', reply_markup=InlineKeyboardMarkup().
                            add(InlineKeyboardButton("–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫", callback_data=f"city|–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫"),
                                InlineKeyboardButton("–ë–µ–ª–æ–≥–æ—Ä—Å–∫", callback_data=f"city|–ë–µ–ª–æ–≥–æ—Ä—Å–∫")).
                            add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel")))


async def add_city(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        inline_command = callback_query.data.split('|')
        data['city'] = inline_command[1]
        await FSMAddAd.photo.set()
        await callback_query.message.reply('üöÜ–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—å—è–≤–ª–µ–Ω–∏—è',
                                           reply_markup=InlineKeyboardMarkup().add(
                                               InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel")))


async def add_ad(message: types.Message, state: FSMContext):
    async  with state.proxy() as data:
        data['photo_id'] = message.photo[0].file_id
        await FSMAddAd.next()
        await message.reply('üöÜ–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—å—è–≤–ª–µ–Ω–∏–µ', reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel")))


async def add_product_name(message: types.Message, state: FSMContext):
    async  with state.proxy() as data:
        data['product_name'] = message.text
        await FSMAddAd.next()
        await message.reply('üöÜ–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel")))


async def add_specifications(message: types.Message, state: FSMContext):
    async  with state.proxy() as data:
        data['specifications'] = message.text
        await FSMAddAd.next()
        await message.reply('üöÜ–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É', reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel")))


async def add_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['prise'] = message.text
        await FSMAddAd.next()
        await message.reply('üöÜ–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel")))


async def add_contact(message: types.Message, state: FSMContext):
    async  with state.proxy() as data:
        data['contact'] = message.text
        user = [message.from_id, message.from_user.first_name,
                time.strftime("%d.%m.%Y %H:%M:%S", time.gmtime())] + list(data.values())
        await state.finish()
        db.adds_user_products(user)
        id_ad_bd = db.exists_id_product(user[0], user[4])
        await bot.send_photo(message.from_id, photo=data['photo_id'],
                             caption=f"<u><b>{data['product_name'].strip().upper()}</b></u>\n"
                                     f"{data['specifications']}\n<b>–¶–µ–Ω–∞: </b>{data['prise']}\n"
                                     f"<i><b>{data['contact']}</b></i>",
                             parse_mode='HTML',
                             reply_markup=InlineKeyboardMarkup().add(
                                 InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
                                                      callback_data=f"sends_to_admin:{id_ad_bd}"),
                                 InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{id_ad_bd}")))


async def del_ad(callback_query: types.CallbackQuery):
    inline_command = callback_query.data.split(':')
    db.del_ad_bd(inline_command[1])
    await callback_query.answer(text='üöÜ–û–±—å—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
                                show_alert=True)
    await callback_query.message.delete()


async def del_one_ad(callback_query: types.CallbackQuery):
    inline_command = callback_query.data.split(':')
    db.del_ad_bd(inline_command[1])
    try:
        if inline_command[3] == '–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫':
            await bot.delete_message(CHAT_ID_BL, int(inline_command[2]))
            await callback_query.answer(text='üöÜ–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
                                        show_alert=True)
        elif inline_command[3] == '–ë–µ–ª–æ–≥–æ—Ä—Å–∫' or not inline_command[3]:
            await bot.delete_message(CHAT_ID_BEL, int(inline_command[2]))
            await callback_query.answer(text='üöÜ–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
                                        show_alert=True)
    except MessageCantBeDeleted:
        await callback_query.answer(text='üöÜ–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
                                    show_alert=True)
    except MessageToDeleteNotFound:
        await callback_query.answer(text='üöÜ–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n'
                                         '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìå–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—èüìå', cache_time=2,
                                    show_alert=True)


async def cancel_fsm(callback_query: types.CallbackQuery, state: FSMContext):
    '''–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –æ–±—å—è–≤–ª–µ–Ω–∏—è, —Å–±—Ä–æ—Å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è'''
    await state.reset_state()
    inline_command = callback_query.data
    await callback_query.answer(
        text='üöÜ–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –ø–æ–¥–∞—á—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–∞—á–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–µ –∫–Ω–æ–ø–∫—É\nüëáüëáüëá–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.üëáüëáüëá',
        show_alert=True)
    await callback_query.message.delete()


async def user_ad_all_bd(message: types.Message):
    '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –º–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'''
    all_prod = db.user_products(message.from_user.id)
    number = 0
    if all_prod:
        if len(all_prod) == 1:
            await bot.send_photo(message.from_user.id, photo=all_prod[number][4],
                                 caption=f"<u><b>{all_prod[number][5].strip().upper()}</b></u>\n{all_prod[number][6]}\n"
                                         f"<b>–¶–µ–Ω–∞: </b>{all_prod[number][7]}\n<i>{all_prod[number][8]}</i>\n"
                                         f"<i>–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ –û–±—å—è–≤–ª–µ–Ω–∏—è {all_prod[number][10]}</i>",
                                 parse_mode='HTML',
                                 reply_markup=InlineKeyboardMarkup(row_width=4).add(
                                     InlineKeyboardButton(str(number + 1) + '/' + str(len(all_prod)),
                                                          callback_data="null"),
                                     InlineKeyboardButton('‚ùå',
                                                          callback_data=f"delete:{all_prod[number][0]}:"
                                                                        f"{all_prod[number][9]}:"
                                                                        f"{all_prod[number][10]}")))
        elif len(all_prod) > 1:
            await bot.send_photo(message.from_user.id, photo=all_prod[number][4],
                                 caption=f"<u><b>{all_prod[number][5].strip().upper()}</b></u>\n{all_prod[number][6]}\n"
                                         f"<b>–¶–µ–Ω–∞: </b>{all_prod[number][7]}\n<i>{all_prod[number][8]}</i>\n"
                                         f"<i>–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ –û–±—å—è–≤–ª–µ–Ω–∏—è {all_prod[number][10]}</i>",
                                 parse_mode='HTML',
                                 reply_markup=InlineKeyboardMarkup(row_width=4).add(
                                     InlineKeyboardButton("<<<", callback_data=f"next:{len(all_prod) - 1}"),
                                     InlineKeyboardButton(str(number + 1) + '/' + str(len(all_prod)),
                                                          callback_data="null"),
                                     InlineKeyboardButton('‚ùå',
                                                          callback_data=f"delete:{all_prod[number][0]}:"
                                                                        f"{all_prod[number][9]}:"
                                                                        f"{all_prod[number][10]}"),
                                     InlineKeyboardButton(">>>", callback_data=f"next:{number + 1}")))
            return

    else:
        await message.answer('üöÜ–£ –≤–∞—Å –Ω–µ—Ç –æ–±—å—è–≤–ª–µ–Ω–∏–π')


async def next_ad(callback_query: types.CallbackQuery):
    '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä—ë–¥ –Ω–∞–∑–∞–¥ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–≤–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π'''
    inline_command = callback_query.data.split(':')
    all_prod = db.user_products(callback_query.from_user.id)
    number = int(inline_command[1])
    try:
        phot = InputMediaPhoto(media=all_prod[number][4],
                               caption=f"<u><b>{all_prod[number][5].strip().upper()}</b></u>\n{all_prod[number][6]}\n"
                                       f"<b>–¶–µ–Ω–∞: </b>{all_prod[number][7]}\n<i>{all_prod[number][8]}</i>\n"
                                       f"<i>–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ –û–±—å—è–≤–ª–µ–Ω–∏—è {all_prod[number][10]}</i>",
                               parse_mode='HTML')
        if 0 < number < len(all_prod) - 1:
            await callback_query.bot.edit_message_media(chat_id=callback_query.message.chat.id,
                                                        message_id=callback_query.message.message_id,
                                                        media=phot, reply_markup=InlineKeyboardMarkup(row_width=4).add(
                    InlineKeyboardButton("<<<", callback_data=f"next:{number - 1}"),
                    InlineKeyboardButton(str(number + 1) + '/' + str(len(all_prod)), callback_data="null"),
                    InlineKeyboardButton('‚ùå', callback_data=f"delete:{all_prod[number][0]}:"
                                                            f"{all_prod[number][9]}:"
                                                            f"{all_prod[number][10]}"),
                    InlineKeyboardButton(">>>", callback_data=f"next:{number + 1}")))
        elif number == 0:
            await callback_query.bot.edit_message_media(chat_id=callback_query.message.chat.id,
                                                        message_id=callback_query.message.message_id,
                                                        media=phot, reply_markup=InlineKeyboardMarkup(row_width=4).add(
                    InlineKeyboardButton("<<<", callback_data=f"next:{len(all_prod) - 1}"),
                    InlineKeyboardButton(str(number + 1) + '/' + str(len(all_prod)), callback_data="null"),
                    InlineKeyboardButton('‚ùå', callback_data=f"delete:{all_prod[number][0]}:"
                                                            f"{all_prod[number][9]}:"
                                                            f"{all_prod[number][10]}"),
                    InlineKeyboardButton(">>>", callback_data=f"next:{number + 1}")))
        elif number == len(all_prod) - 1:
            await callback_query.bot.edit_message_media(chat_id=callback_query.message.chat.id,
                                                        message_id=callback_query.message.message_id,
                                                        media=phot, reply_markup=InlineKeyboardMarkup(row_width=4).add(
                    InlineKeyboardButton("<<<", callback_data=f"next:{number - 1}"),
                    InlineKeyboardButton(str(number + 1) + '/' + str(len(all_prod)), callback_data="null"),
                    InlineKeyboardButton('‚ùå', callback_data=f"delete:{all_prod[number][0]}:"
                                                            f"{all_prod[number][9]}:"
                                                            f"{all_prod[number][10]}"),
                    InlineKeyboardButton(">>>", callback_data=f"next:{0}")))
    except IndexError:
        await callback_query.answer('üöÜ–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìå–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—èüìå',
                                    cache_time=2)


async def eho(message: types.Message):
    await message.answer(message.text, reply_markup=keyword)


def register_handler_users(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(command_help, text=['üÜò–ü–æ–º–æ—â—å'])
    dp.register_message_handler(add_start, text=['üìå–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µüìå'], state=None)
    dp.register_message_handler(user_ad_all_bd, text=['–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'])
    dp.register_callback_query_handler(add_city, lambda x: x.data.startswith('city'), state=FSMAddAd.city)
    dp.register_message_handler(add_ad, content_types=['photo'], state=FSMAddAd.photo)
    dp.register_message_handler(add_product_name, state=FSMAddAd.product_name)
    dp.register_message_handler(add_specifications, state=FSMAddAd.specifications)
    dp.register_message_handler(add_price, state=FSMAddAd.prise)
    dp.register_message_handler(add_contact, state=FSMAddAd.contact)
    dp.register_callback_query_handler(cancel_fsm, lambda x: x.data.startswith('cancel'), state='*')
    dp.register_callback_query_handler(del_one_ad, lambda x: x.data.startswith('delete'))
    dp.register_callback_query_handler(next_ad, lambda x: x.data.startswith('next'))
    dp.register_callback_query_handler(del_ad, lambda x: x.data.startswith('del'))
    dp.register_message_handler(eho)
